LIBRARY DESIGN:

Graphs are a set of Nodes, and Nodes are a set of Arcs (to other Nodes).
The toy Graph library (Arc, Node, Graph) is usable for other applications.
A lot of typechecking happens here to ensure that Graphs are reliable.

The routing algorithms can be "dropped-in" to the Graph as needed.
Most of these have a single-point-of-entry: only one public handle to call.

Djikstra's is a simple implementation of Djikstra's algorithm.
This returns a hash of single-source shortest paths for graph.
See: Cormen, Leiserson, Rivest, Stein. "Introduction to Algorithms." Ch. 24.3.

A couple of recursive pathcounting algorithms.
These do NOT return routes, only route counts.
To get the routes, would need to be able to backtrack across arcs.

A simple route-tracing algorithm.

---

TODO:
0. rename methods with underscore -- easier to read than camelcase
1. make arc weights immutable
2. consider using symbols instead of strings for names...
3. should we interact through names or node objects?
4. safety checking at shortestPaths call
5. nodeWithName and nodeWithName
6. short-circuit djikstra's after desired node is found

---

WISH LIST:
0. a pretty printer for the graph class: graph+Printer.rb
1. route counting methods are REALLY similar. Consolidate ???